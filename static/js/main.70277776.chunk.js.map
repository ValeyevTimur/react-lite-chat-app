{"version":3,"sources":["socket.js","img/emoji.svg","components/Emoji/EmojiRender.jsx","components/ChatInput/ChatInput.jsx","components/Image/Image.jsx","img/send.svg","img/file.svg","components/Chat/Chat.jsx","App.jsx","index.js"],"names":["socket","io","connect","EmojiRender","addEmoji","useState","visible","setVisible","emojiRef","React","useRef","handleOutsideClick","event","path","composedPath","includes","current","console","log","useEffect","document","body","addEventListener","className","ref","title","onClick","src","emojiSVG","alt","onSelect","emojiTag","ChatInput","currentMessage","setCurrentMessage","sendMessage","type","value","onChange","e","target","onKeyPress","key","Image","blob","fileName","userName","message","imageSrc","setImageSrc","reader","FileReader","readAsDataURL","onloadend","result","author","Chat","room","messageList","setMessageList","file","setFile","a","messageData","mimeType","name","time","Date","now","getHours","getMinutes","emit","list","chooseFile","files","on","data","map","index","Blob","reactStringReplace","match","i","emoji","set","size","htmlFor","fileSVG","id","native","trim","sendSVG","App","setUserName","setRoom","displayChat","setDisplayChat","placeholder","alert","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70277776.chunk.js","sourcesContent":["import io from 'socket.io-client'\n\nconst PORT = 'http://localhost:5000'\nconst socket = io.connect(PORT)\n\nexport default socket\n","export default __webpack_public_path__ + \"static/media/emoji.97585af2.svg\";","import React, { useState } from 'react'\nimport { Picker } from 'emoji-mart'\nimport 'emoji-mart/css/emoji-mart.css'\nimport emojiSVG from '../../img/emoji.svg'\n\nconst EmojiRender = ({ addEmoji }) => {\n  const [visible, setVisible] = useState(false)\n  const emojiRef = React.useRef()\n\n  const toggleVisible = () => {\n    setVisible(!visible)\n  }\n\n  const handleOutsideClick = (event) => {\n    const path = event.path || (event.composedPath && event.composedPath())\n    if (!path.includes(emojiRef.current)) {\n      console.log('test')\n      setVisible(false)\n    }\n  }\n\n  React.useEffect(() => {\n    document.body.addEventListener('click', handleOutsideClick)\n  }, [])\n\n  return (\n    <div\n      className=\"emoji-list\"\n      ref={emojiRef}\n      title=\"Выбрать смайл\"\n      onClick={toggleVisible}\n    >\n      <div>\n        <img src={emojiSVG} alt=\"emoji-svg\" />\n      </div>\n\n      {visible && (\n        <div>\n          <Picker onSelect={(emojiTag) => addEmoji(emojiTag)} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default EmojiRender\n","import React from 'react'\nimport './ChatInput.css'\n\nconst ChatInput = ({ currentMessage, setCurrentMessage, sendMessage }) => {\n  return (\n    <textarea\n      className=\"chat-input\"\n      type=\"text\"\n      value={currentMessage}\n      onChange={(e) => setCurrentMessage(e.target.value)}\n      onKeyPress={(e) => {\n        e.key === 'Enter' && sendMessage()\n      }}\n    />\n  )\n}\n\nexport default ChatInput\n","import React, { useEffect, useState } from 'react'\nimport './Image.css'\n\nconst Image = ({ blob, fileName, userName, message }) => {\n  const [imageSrc, setImageSrc] = useState('')\n\n  useEffect(() => {\n    const reader = new FileReader()\n    reader.readAsDataURL(blob)\n    reader.onloadend = function () {\n      setImageSrc(reader.result)\n    }\n  }, [blob])\n\n  return (\n    <div className=\"image\">\n      <img src={imageSrc} alt={fileName}></img>\n      <div\n        className={\n          userName === message.author\n            ? 'message-text__me'\n            : 'message-text author'\n        }\n      ></div>\n    </div>\n  )\n}\n\nexport default Image\n","export default __webpack_public_path__ + \"static/media/send.9e4379d8.svg\";","export default __webpack_public_path__ + \"static/media/file.c116d3d6.svg\";","import React, { useEffect, useState } from 'react'\nimport EmojiRender from '../Emoji/EmojiRender'\nimport ChatInput from '../ChatInput/ChatInput'\nimport { Emoji } from 'emoji-mart'\nimport Image from '../Image/Image'\nimport './Chat.css'\nimport reactStringReplace from 'react-string-replace'\nimport sendSVG from '../../img/send.svg'\nimport fileSVG from '../../img/file.svg'\nimport ScrollToBottom from 'react-scroll-to-bottom'\n\nconst Chat = ({ socket, userName, room }) => {\n  const [currentMessage, setCurrentMessage] = useState('')\n  const [messageList, setMessageList] = useState([])\n  const [file, setFile] = useState()\n\n  const sendMessage = async () => {\n    if (file) {\n      const messageData = {\n        room: room,\n        author: userName,\n        type: 'file',\n        body: file,\n        mimeType: file.type,\n        fileName: file.name,\n        time:\n          new Date(Date.now()).getHours() +\n          ':' +\n          new Date(Date.now()).getMinutes(),\n      }\n      setFile()\n      socket.emit('send_message', messageData)\n      setMessageList((list) => [...list, messageData])\n      setCurrentMessage('')\n    } else {\n      if (currentMessage !== '') {\n        const messageData = {\n          room: room,\n          author: userName,\n          body: currentMessage,\n          time:\n            new Date(Date.now()).getHours() +\n            ':' +\n            new Date(Date.now()).getMinutes(),\n        }\n\n        await socket.emit('send_message', messageData)\n        //для отображения сообщений на \"своем\" экране\n        setMessageList((list) => [...list, messageData])\n        setCurrentMessage('')\n      }\n    }\n  }\n\n  const chooseFile = (e) => {\n    setCurrentMessage(e.target.files[0].name)\n    setFile(e.target.files[0])\n  }\n\n  const renderMessages = (message, index) => {\n    if (message.type === 'file') {\n      const blob = new Blob([message.body])\n      return (\n        <div\n          className={userName === message.author ? 'message me' : 'message'}\n          key={index}\n        >\n          <Image\n            fileName={message.fileName}\n            blob={blob}\n            userName={message.author}\n            message={message}\n          />\n        </div>\n      )\n    }\n\n    return (\n      <>\n        <div className={userName === message.author ? 'message me' : 'message'}>\n          <div className=\"message-content\">\n            <div\n              className={\n                userName === message.author\n                  ? 'message-bubble isMe'\n                  : 'message-bubble'\n              }\n            >\n              <div className=\"message-text \">\n                {reactStringReplace(message.body, /:(.+?):/g, (match, i) => (\n                  <Emoji key={i} emoji={match} set=\"apple\" size={22} />\n                ))}\n              </div>\n            </div>\n            <div\n              className={\n                userName === message.author\n                  ? 'message-text__me'\n                  : 'message-text author'\n              }\n            >\n              <div className=\"description\">\n                <p>{message.author}</p>\n                <p> {message.time}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  //Каждый раз когда происходит изменения на странице отрабатывает хук\n  useEffect(() => {\n    socket.on('recieve_message', (data) => {\n      console.log(data)\n      setMessageList((list) => [...list, data])\n    })\n  }, [socket])\n\n  const addEmoji = ({ native }) => {\n    setCurrentMessage((currentMessage + ' ' + native).trim())\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <div className=\"chat-header\">ReactJS Lite Chat</div>\n      </div>\n      <div className=\"main\">\n        <div className=\"chat\">\n          <ScrollToBottom className=\"messages\">\n            <div>{messageList.map(renderMessages)}</div>\n          </ScrollToBottom>\n        </div>\n      </div>\n      <div className=\"footer\">\n        <div className=\"chat-actions\">\n          <div className=\"actions-left\">\n            <div className=\"send-file\" title=\"Выбрать изображение\">\n              <label htmlFor=\"choose-file\" className=\"chous\">\n                <img src={fileSVG} alt=\"file-svg\" />\n              </label>\n              <input\n                className=\"input-file\"\n                id=\"choose-file\"\n                onChange={chooseFile}\n                type=\"file\"\n              />\n            </div>\n\n            <EmojiRender chooseFile={chooseFile} addEmoji={addEmoji} />\n          </div>\n\n          <ChatInput\n            currentMessage={currentMessage}\n            setCurrentMessage={setCurrentMessage}\n            sendMessage={sendMessage}\n          />\n          <div className=\"send-btn\" onClick={sendMessage} title=\"Отправить\">\n            <img src={sendSVG} alt=\"send-svg\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Chat\n","import React, { useState } from 'react'\nimport './App.css'\nimport socket from './socket'\nimport Chat from './components/Chat/Chat'\n\nfunction App() {\n  const [userName, setUserName] = useState('')\n  const [room, setRoom] = useState('')\n  const [displayChat, setDisplayChat] = useState(false)\n\n  const enterRoom = () => {\n    if (userName !== '' && room !== '') {\n      //Передача данных комнаты на бекэнд для соединения\n      socket.emit('enter_room', room)\n      // console.log(userName)\n\n      //Изменение состояния. Если пользователь вошел в чат, отобразить его\n      setDisplayChat(true)\n    } else alert('Введите имя пользователя/комнату')\n  }\n\n  return (\n    <>\n      {!displayChat ? (\n        <div className=\"wrapper\">\n          <form className=\"enter-chat\">\n            <h3>Войти в чат</h3>\n            <label htmlFor=\"username\">Имя</label>\n            <input\n              type=\"text\"\n              placeholder=\"Введите имя\"\n              onChange={(e) => setUserName(e.target.value)}\n              id=\"username\"\n            />\n            <label htmlFor=\"room\">Комната</label>\n            <input\n              type=\"text\"\n              placeholder=\"Введите комнату\"\n              onChange={(e) => setRoom(e.target.value)}\n              id=\"room\"\n            />\n            <button onClick={enterRoom}>Войти</button>\n          </form>\n        </div>\n      ) : (\n        <>\n          <Chat socket={socket} userName={userName} room={room} />\n        </>\n      )}\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.jsx'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}